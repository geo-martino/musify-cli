from __future__ import annotations

import os
import shutil
from datetime import datetime
from pathlib import Path
from typing import Protocol

from musify_cli.parser.core import AppData


class DatetimeStore(Protocol):
    dt: datetime


class PathsManager:
    """Configures options for app data paths."""
    def __init__(self, config: AppData, dt: DatetimeStore):
        self.config = config
        self._dt: DatetimeStore = dt

        self._base: Path | None = None
        self._backup: Path | None = None
        self._cache: Path | None = None
        self._token: Path | None = None
        self._local_library: Path | None = None

    def __iter__(self):
        return iter((
            self.backup, self.token, self.cache, self.local_library, self.base
        ))

    def _get_path(self, path: str | Path) -> Path:
        path = Path(path)
        if not path.is_absolute():
            path = self.base.joinpath(path)
        if "PYTEST_CURRENT_TEST" not in os.environ:
            path.mkdir(parents=True, exist_ok=True)
        return path

    def clear_empty(self) -> None:
        """Remove all empty folders generated by this manager."""
        for path in self:
            if not path.glob("*"):
                shutil.rmtree(path)

    @property
    def base(self) -> Path:
        """Base directory to use when given config has relative paths."""
        if self._base is None:
            self._base = Path(self.config.base)
            if "PYTEST_CURRENT_TEST" not in os.environ:
                self._base.mkdir(parents=True, exist_ok=True)
        return self._base

    @property
    def backup(self) -> Path:
        """Directory of the folder to use for backup data"""
        if self._backup is None:
            path_add_dt = Path(self.config.backup).joinpath(self._dt.dt.strftime("%Y-%m-%d_%H.%M.%S"))
            self._backup = self._get_path(path_add_dt)
        return self._backup

    @property
    def cache(self) -> Path:
        """Directory of the folder to use for cache data"""
        if self._cache is None:
            self._cache = self._get_path(self.config.cache)
        return self._cache

    @property
    def token(self) -> Path:
        """Directory of the folder to use for token data"""
        if self._token is None:
            self._token = self._get_path(self.config.token)
        return self._token

    @property
    def local_library(self) -> Path:
        """Directory of the folder to use for local library export data"""
        if self._local_library is None:
            self._local_library = self._get_path(self.config.local_library)
        return self._local_library
